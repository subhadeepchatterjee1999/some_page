
/******************************************************************\
 * READ FIRST:
 *
 * The target for this solution is keep compatibility with old
 * browsers by using only the float property.
 *
 * Four Card Section Challenge | Main Stylesheet.
 *
 * Challenge by Frontend Mentor. Coded by Alfonso Suarez.
 *
 ******************************************************************/

/*
 * # Common Styles Rules
 */

/*
 * ## Global
 */

/*
 * I would prefer to declare variables, but due the bad compatibility
 * between IE browsers and CSS variables, I omitted their use.
 *
:root {
  --color-prim-cyan:   hsl(180, 62%, 55%);
  --color-prim-red:    hsl(0, 78%, 62%);
  --color-prim-orange: hsl(34, 97%, 64%);
  --color-prim-blue:   hsl(212, 86%, 64%);
  --color-neut-vdblue: hsl(234, 12%, 34%);
  --color-neut-grblue: hsl(229, 6%, 66%);
}
 *
 */

/*
 * ## Document Body
 */

body {
  /* Clean content offset */
  margin: 0; padding: 0;
  background-color:#101010;
  /* Set common font styles */
  font-family: 'Poppins', sans-serif;
  font-weight: 400;
  font-size: 15px;
}

/*
 * ## Elements Styles
 */

h1, h2 {
  font-weight: 600;
  color: white;
}

p { color: hsl(229, 6%, 66%); }

/* - - - */

/*
 * # Specific Styles Rules
 */

/*
 * ## Main Header Element
 */

header {
  margin: 80px 30px 75px;
  text-align: center;
}

header > h1 {
  margin: 20px 0;
  font-weight: 200;
}

header > h1 strong {
  font-weight: 600;
}

header > p {
  max-width: 520px;
  margin: auto;
}

@media (max-width: 443px) {
  header > h1 { font-size: 1.6em; }
}

/*
 * ## Cards Container Class
 */

.cards-container {
  /* List Styling Clean-Up */
  list-style: none;
  padding: 0; margin: 0;

  /* Alignment */
  margin: auto;
}

/*
 * ### Responsive Layout Rules
 */

/* When viewport width is equal or greater than 788 pixels,
 * the cards container will fix its width and will append the
 * clear fix pseudo-class to avoid float property issues.
 *
 * The width will depend from the current viewport width.
 * If is greater than 1166 pixels, will be 1106 pixels.
 * Else, then will be 728 pixels.
 */

@media (min-width: 788px) {
  .cards-container {
    width: 728px;
  }
  /* Clear Fix */
  .cards-container::after {
    content: "";
    clear: both;
    display: table;
    background-color:grey;
  }
}

@media (min-width: 1166px) {
  .cards-container {
    width: 1106px;
  }
}

/*
 * ## Feature Card Class
 */

[class$='feature-card'] {
  /* Positioning and Sizing */
  position: relative;
  box-sizing: border-box;
  width: 350px; height: 250px;

  /* Alignment */
  margin: 0;
  padding: 32px;

  /* Box Details */
  border-radius: 10px;
  border-top: solid 5px black;
  box-shadow: 2px 5px 20px rgb(0,0,0,0.1);
}

/*
 * ### Inner Elements
 */

[class$='feature-card'] h2, [class$='feature-card'] p { margin: 0; }

[class$='feature-card'] img {
  position: absolute;
  bottom: 32px; right: 32px;
}

/*
 * ### Top Border Colors Rules
 */

[class$='feature-card'][class*='cyan'] {
  border-color: hsl(180, 62%, 55%);
  background-color: #535353;
}

[class$='feature-card'][class*='red'] {
  border-color: hsl(0, 78%, 62%);
  background-color: #535353;
}

[class$='feature-card'][class*='orange'] {
  border-color: hsl(34, 97%, 64%);
  background-color: #535353;
}

[class$='feature-card'][class*='blue'] {
  border-color: hsl(212, 86%, 64%);
  background-color: #535353;
}

/*
 * ### Responsive Layout Rules
 */

/* When the viewport width is less than 788 pixels, the container
 * will not be fixed and every card will arrange normally one over
 * other. This layout is comfortable for mobile devices.
 *
 * But if is equal or greather, every card will set the float
 * property to the left.
 *
 * They will sort smartly on a grid of two columns and two rows if
 * the current viewport width is less than 1166 pixels, that is,
 * for notebooks and tablets screens.
 *
 * Else, then they will sort like the final challenge for desktop
 * larger screens (with a viewport width greather than 1166 pixels.)
 *
 * I had to hard coded every effect because I only use float
 * properties. And I didn't went to use auxiliar HTML elements,
 * trying to keep separation of concerns.
 */

@media (min-width: 788px) {
  [class$='feature-card'] {
    float: left;
  }

  @media (min-width: 1166px) {

    [class$='feature-card']:first-child {
      margin: 140px 0;
    }

    [class$='feature-card']:nth-child(2),
    [class$='feature-card']:nth-child(3) {
      margin: 0 22px;
    }

    [class$='feature-card']:last-child {
      margin-top: -110px;
    }

    [class$='feature-card']:nth-child(3) {
      margin-top: 30px;
    }
  }

  @media (max-width: 1165px) {

    [class$='feature-card']:nth-child(3),
    [class$='feature-card']:nth-child(4) {
      margin-top: 30px;
    }

    [class$='feature-card']:nth-child(2),
    [class$='feature-card']:nth-child(4) {
      margin-left: 28px;
    }
  }
}

@media (max-width: 787px) {

  [class$='feature-card'] {
    width: 300px; height: 220px;
    margin: auto;
  }

  [class$='feature-card']:not(:first-child) {
    margin-top: 22px;
  }
}
.navi{
  box-shadow: 0px 8px 8px -6px rgba(0,0,0,.5);
}
.navbar{
  background-color:rgba(0,235,255,.5)!important;
  padding-left: 30px;
  padding-right: 30px;
}
/*
 * ## Main Footer
 */

footer { margin-top: 80px }

/*
 * ## Attribution Watermark
 */

.attribution { font-size: 11px; text-align: center; }
.attribution a { color: hsl(228, 45%, 44%); }
